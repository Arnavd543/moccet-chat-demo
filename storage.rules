rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Workspace file structure with organized folders
    match /workspaces/{workspaceId}/channels/{channelId}/files/{fileName} {
      allow read: if request.auth != null && 
        isChannelMember(workspaceId, channelId);
      
      allow write: if request.auth != null && 
        isChannelMember(workspaceId, channelId) &&
        request.resource.size < 100 * 1024 * 1024 && // 100MB limit
        request.resource.contentType.matches('application/.*|text/.*|video/.*|audio/.*|image/.*');
      
      allow delete: if request.auth != null && (
        request.auth.uid == resource.metadata.uploadedBy ||
        isWorkspaceAdmin(workspaceId)
      );
    }
    
    // Images with separate folder for optimization
    match /workspaces/{workspaceId}/channels/{channelId}/images/{fileName} {
      allow read: if request.auth != null && 
        isChannelMember(workspaceId, channelId);
      
      allow write: if request.auth != null && 
        isChannelMember(workspaceId, channelId) &&
        request.resource.size < 50 * 1024 * 1024 && // 50MB limit for images
        request.resource.contentType.matches('image/.*');
      
      allow delete: if request.auth != null && (
        request.auth.uid == resource.metadata.uploadedBy ||
        isWorkspaceAdmin(workspaceId)
      );
    }
    
    // Documents folder
    match /workspaces/{workspaceId}/channels/{channelId}/documents/{fileName} {
      allow read: if request.auth != null && 
        isChannelMember(workspaceId, channelId);
      
      allow write: if request.auth != null && 
        isChannelMember(workspaceId, channelId) &&
        request.resource.size < 100 * 1024 * 1024 && // 100MB limit
        (request.resource.contentType.matches('application/pdf') ||
         request.resource.contentType.matches('application/.*document.*') ||
         request.resource.contentType.matches('application/.*sheet.*') ||
         request.resource.contentType.matches('application/.*presentation.*'));
      
      allow delete: if request.auth != null && (
        request.auth.uid == resource.metadata.uploadedBy ||
        isWorkspaceAdmin(workspaceId)
      );
    }
    
    // Thumbnails (generated by Cloud Functions)
    match /workspaces/{workspaceId}/channels/{channelId}/thumbnails/{fileName} {
      allow read: if request.auth != null && 
        isChannelMember(workspaceId, channelId);
      
      // Only Cloud Functions can write thumbnails
      allow write: if false;
    }
    
    // User avatars
    match /users/{userId}/avatar/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        request.resource.size < 5 * 1024 * 1024 && // 5MB limit for avatars
        request.resource.contentType.matches('image/.*');
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Temporary uploads (for processing)
    match /temp/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Helper functions
    function isChannelMember(workspaceId, channelId) {
      let workspace = firestore.get(/databases/(default)/documents/workspaces/$(workspaceId));
      let channel = firestore.get(/databases/(default)/documents/channels/$(channelId));
      
      return request.auth.uid in workspace.data.members ||
             (channel.data.type == 'public' && request.auth.uid in workspace.data.members) ||
             (channel.data.type == 'private' && request.auth.uid in channel.data.members);
    }
    
    function isWorkspaceAdmin(workspaceId) {
      let workspace = firestore.get(/databases/(default)/documents/workspaces/$(workspaceId));
      return request.auth.uid == workspace.data.ownerId ||
             request.auth.uid in workspace.data.admins;
    }
  }
}